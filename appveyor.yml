image: Visual Studio 2017

environment:
  global:
    # VS 2017
    VS_VERSION: Visual Studio 15 2017
    SWIG_VERSION: swigwin-3.0.12

  matrix:
    - platform: x86 
      PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7.x"
      PYTHON_ARCH: "32"
    
    - platform: x86 
      PYTHON: "C:\\Python36"
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "32"
      
    - platform: x64 
      PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7.x"
      PYTHON_ARCH: "64"
    
    - platform: x64 
      PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "64"
  
shallow_clone: true

# cache the SDK and Python wheels and for quicker builds
cache:
  - sdk
  - '%LOCALAPPDATA%\pip\Cache'
  - '%SWIG_VERSION%'

build_script:
  - if "%platform%" == "x64" SET VS_FULL=%VS_VERSION% Win64
  - if "%platform%" == "x86" SET VS_FULL=%VS_VERSION%
  - if "%platform%" == "x86" SET SDK=release-1911
  - if "%platform%" == "x64" SET SDK=release-1911-x64
  - if "%platform%" == "x64" call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat"
  - if "%platform%" == "x86" call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build\\vcvars32.bat"
  - echo "%VS_FULL%"
  - if not exist %SWIG_VERSION% (  
        appveyor DownloadFile http://prdownloads.sourceforge.net/swig/%SWIG_VERSION%.zip &&
        7z x "%SWIG_VERSION%.zip" > nul
    )
  - set SDK_ZIP=%SDK%-dev.zip
  - set SDK_URL=http://download.gisinternals.com/sdk/downloads/%SDK_ZIP%
  - echo "%SDK_ZIP%"
  - echo "%SDK_URL%"
  - if not exist sdk (
        mkdir sdk &&
        cd sdk &&
        appveyor DownloadFile "%SDK_URL%" &&
        7z x "%SDK_ZIP%" > nul) else (
        echo "%SDK_URL% already downloaded" &&
        cd sdk
        )
  - cd %SDK%

  - cd lib
  - copy libpng.lib libpng.lib.lib
  - set ROOT_FOLDER=%APPVEYOR_BUILD_FOLDER:\=\\%
  - cd %ROOT_FOLDER%
  - set SDK_PREFIX=%ROOT_FOLDER%\\sdk\\%SDK%
  - set SDK_INC=%ROOT_FOLDER%\\sdk\\%SDK%\\include
  - set SDK_LIB=%ROOT_FOLDER%\\sdk\\%SDK%\\lib
  - set SDK_BIN=%ROOT_FOLDER%\\sdk\\%SDK%\\bin
  - set SWIG_EXECUTABLE=%ROOT_FOLDER%\\%SWIG_VERSION%\\swig.exe
  - set REGEX_DIR=%ROOT_FOLDER%\\sdk\\regex-0.12
  - SET PYTHON_EXECUTABLE=%PYTHON%\\python.exe
  - mkdir build
  - cd build
  - cmake -G "%VS_FULL%" .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=%SDK_PREFIX% -DFREETYPE_INCLUDE_DIR_freetype2=%SDK_INC%\\freetype 
        -DFREETYPE_INCLUDE_DIR_ft2build=%SDK_INC%\\freetype -DFREETYPE_LIBRARY=%SDK_LIB%\\freetype2411.lib 
        -DZLIB_INCLUDE_DIR=%SDK_INC% -DZLIB_LIBRARY=%SDK_LIB%\\zlib.lib -DPNG_PNG_INCLUDE_DIR=%SDK_INC% 
        -DPNG_LIBRARY=%SDK_LIB%\\libpng.lib -DPNG_LIBRARIES=%SDK_LIB%\\libpng.lib -DJPEG_INCLUDE_DIR=%SDK_INC% 
        -DJPEG_LIBRARY=%SDK_LIB%\\libjpeg.lib -DWITH_PROJ=1 -DPROJ_INCLUDE_DIR=%SDK_INC% -DPROJ_LIBRARY=%SDK_LIB%\\proj_i.lib 
        -DFRIBIDI_INCLUDE_DIR=%SDK_INC% -DFRIBIDI_LIBRARY=%SDK_LIB%\\fribidi.lib -DHARFBUZZ_INCLUDE_DIR=%SDK_INC%\\harfbuzz 
        -DHARFBUZZ_LIBRARY=%SDK_LIB%\\harfbuzz.lib -DICONV_INCLUDE_DIR=%SDK_INC% -DICONV_LIBRARY=%SDK_LIB%\\iconv.lib 
        -DICONV_DLL=%SDK_BIN%\iconv.dll -DCAIRO_INCLUDE_DIR=%SDK_INC% -DCAIRO_LIBRARY=%SDK_LIB%\\cairo.lib -DFCGI_INCLUDE_DIR=%SDK_INC% 
        -DFCGI_LIBRARY=%SDK_LIB%\\libfcgi.lib -DGEOS_INCLUDE_DIR=%SDK_INC% -DGEOS_LIBRARY=%SDK_LIB%\\geos_c.lib 
        -DPOSTGRESQL_INCLUDE_DIR=%SDK_INC% -DPOSTGRESQL_LIBRARY=%SDK_LIB%\\libpqdll.lib -DGDAL_INCLUDE_DIR=%SDK_INC% 
        -DGDAL_LIBRARY=%SDK_LIB%\\gdal_i.lib -DLIBXML2_INCLUDE_DIR=%SDK_INC%\\libxml -DLIBXML2_LIBRARIES=%SDK_LIB%\\libxml2.lib 
        -DGIF_INCLUDE_DIR=%SDK_INC% -DGIF_LIBRARY=%SDK_LIB%\\giflib.lib -DWITH_CURL=1 -DCURL_INCLUDE_DIR=%SDK_INC% 
        -DCURL_LIBRARY=%SDK_LIB%\\libcurl_imp.lib -DMS_EXTERNAL_LIBS=wsock32.lib -DWITH_SOS=1 -DWITH_CLIENT_WFS=1 
        -DWITH_CLIENT_WMS=1 -DSVG_INCLUDE_DIR=%SDK_INC% -DSVG_LIBRARY=%SDK_LIB%\\libsvg.lib -DSVGCAIRO_INCLUDE_DIR=%SDK_INC% 
        -DSVGCAIRO_LIBRARY=%SDK_LIB%\\libsvg-cairo.lib -DWITH_SVGCAIRO=1 -DREGEX_DIR=%REGEX_DIR% -DWITH_POINT_Z_M=1 -DWITH_KML=1 
        -DWITH_THREAD_SAFETY=1 -DSWIG_EXECUTABLE=%SWIG_EXECUTABLE% -DWITH_PYTHON=1 -DPYTHON_EXECUTABLE=%PYTHON_EXECUTABLE% 
        -DWITH_CSHARP=1 -DWITH_PROTOBUFC=0
  - cmake --build . --config Release

before_test:
  - "%PYTHON_EXECUTABLE% -m pip install --upgrade pip"
  - cd %ROOT_FOLDER%\\mapscript\\python
  - "%PYTHON_EXECUTABLE% -m pip install -r requirements-dev.txt"

test_script:
  - set PATH=%PYTHON%;%PYTHON%\\Scripts;%ROOT_FOLDER%\\build\\Release;%ROOT_FOLDER%\\sdk\\%SDK%\\bin;%PATH%
  - set PROJ_LIB=%ROOT_FOLDER%\\sdk\\%SDK%\\bin\\proj\\SHARE
  - set PYTHONPATH=%ROOT_FOLDER%\\build\\mapscript\\python\\Release;%ROOT_FOLDER%\\build\\mapscript\\python
  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""  
  - cd %ROOT_FOLDER%\\mapscript\\python
  - "%PYTHON_EXECUTABLE% -m pytest --ignore=tests/cases/fonttest.py --ignore=tests/cases/hashtest.py --ignore=tests/cases/pgtest.py --ignore=tests/cases/threadtest.py tests/cases"

after_test:
  # If tests are successful, create binary packages for the project.
  # - python setup.py bdist_wheel"
   
deploy: off
